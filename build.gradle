/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */
buildscript {
  ext.kotlin_version = '1.3.50'
  ext.ktor_version = '1.2.3'
}

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
//    implementation 'org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version'
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile "io.ktor:ktor-gson:$ktor_version"
    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
}

application {
    // Define the main class for the application.
    mainClassName = 'com.example.kotlinserver.AppKt'
}
jar {
  manifest {
    attributes 'Main-Class': 'com.example.kotlinserver.AppKt'
    }

    // The following line is the key to create self-executable jar as the gradle
    // script needed a way to collect all kotlin files and put them into the
    // jar.
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task stage {
  dependsOn installDist
}

test {
  beforeTest { descriptor ->
    logger.lifecycle("Running test: ${descriptor}")
  }
  println "Inside test: kotlin version:$kotlin_version"
  println "Inside test: ktor version:$ktor_version"
  doLast {
    println 'last in test'
  }
}

println 'This is executed during config phase'

task configured {
  println 'This is also executed during config phase'
}

task testBoth {
  println 'inside testBoth'
  doFirst {
    println 'do first in testBoth'
  }
  doLast {
    println 'do last in testBoth'
  }
}

